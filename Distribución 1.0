Codigo Optimizacion Lineal para distribucion para reparto "optimo" a cada tienda
import pandas as pd
import numpy as np
import pulp

# Ruta del archivo Excel
file_path = r'C:\Users\Jaime Valderrama\OneDrive - American Sportswear, S.A\Documentos\Jaime\Testing\Nueva carpeta\carga.xlsx'

# Leer el archivo de Excel
df = pd.read_excel(file_path, sheet_name="Hoja1")

# Definir proporciones para cada tienda
proporciones = np.array([0.10, 0.10, 0.10, 0.20, 0.30, 0.20])
tiendas = ["Tienda 1", "Tienda 2", "Tienda 3", "Tienda 4", "Tienda 5", "Tienda 6"]

def repartir_productos(codigos, cantidades):
    resultados = []
    for codigo, cantidad in zip(codigos, cantidades):
        # Crear el problema de optimización
        prob = pulp.LpProblem("DistribucionProductos", pulp.LpMinimize)

        # Crear variables de decisión
        x = [pulp.LpVariable(f'x{i}', lowBound=0, cat='Integer') for i in range(len(tiendas))]
        y = [pulp.LpVariable(f'y{i}', lowBound=0, cat='Continuous') for i in range(len(tiendas))]

        # Añadir restricciones para que la suma de productos asignados sea igual a la cantidad total
        prob += pulp.lpSum(x) == cantidad, "SumaTotalProductos"

        # Añadir restricciones para asegurar que todas las tiendas reciban al menos una unidad si es posible
        if cantidad >= len(tiendas):
            for i in range(len(tiendas)):
                prob += x[i] >= 1

        # Añadir restricciones y función objetivo para minimizar la desviación absoluta de las proporciones
        for i in range(len(tiendas)):
            prob += y[i] >= x[i] - cantidad * proporciones[i]
            prob += y[i] >= cantidad * proporciones[i] - x[i]
        
        prob += pulp.lpSum(y), "MinimizarDesviacion"

        # Resolver el problema de optimización
        prob.solve()

        # Obtener los resultados
        reparto = [int(x[i].varValue) for i in range(len(tiendas))]
        tienda_menos_unidades = tiendas[reparto.index(min(reparto))]
        resultados.append({
            "Codigo": codigo,
            "Cantidad Total": cantidad,
            "Reparto": reparto,
            "Tienda con menos unidades": tienda_menos_unidades
        })
    return resultados

# Obtener los códigos y las cantidades del DataFrame
codigos = df["Codigo"].tolist()
cantidades = df["Cantidad"].tolist()

# Repartir los productos
resultados = repartir_productos(codigos, cantidades)

# Crear un DataFrame para los resultados en el formato solicitado
resultados_formato = {
    "Codigo": [],
    "Tienda 1": [],
    "Tienda 2": [],
    "Tienda 3": [],
    "Tienda 4": [],
    "Tienda 5": [],
    "Tienda 6": [],
    "TOTALES": []
}

for resultado in resultados:
    resultados_formato["Codigo"].append(resultado["Codigo"])
    for i, unidades in enumerate(resultado["Reparto"]):
        resultados_formato[tiendas[i]].append(unidades)
    resultados_formato["TOTALES"].append(sum(resultado["Reparto"]))

df_resultados = pd.DataFrame(resultados_formato)

# Guardar el archivo en una ruta con permisos de escritura
output_file_path = r'C:\Users\Jaime Valderrama\OneDrive - American Sportswear, S.A\Documentos\Jaime\Testing\distrimoon.xlsx'
df_resultados.to_excel(output_file_path, index=False)

print(f"Archivo guardado en {output_file_path}")

