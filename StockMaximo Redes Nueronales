Asignacion Stock por Categoria (marzo a julio) con ML y DL

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.impute import SimpleImputer
from sklearn.ensemble import GradientBoostingRegressor
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from google.colab import files

# Cargar los archivos desde tu computadora
print("Por favor, sube el archivo 'Ventasuni.xlsx'")
uploaded_ventas = files.upload()
print("Por favor, sube el archivo 'Inventariouni.xlsx'")
uploaded_inventario = files.upload()

# Leer los archivos Excel
df_stock = pd.read_excel('Inventariouni.xlsx')
df_ventas = pd.read_excel('Ventasuni.xlsx')

# Asegurarse de que las columnas clave existen en ambos DataFrames
if not all(col in df_stock.columns for col in ['Almacen', 'Marca']):
    raise ValueError("El archivo de inventario no contiene las columnas necesarias.")
if not all(col in df_ventas.columns for col in ['Almacen', 'Marca']):
    raise ValueError("El archivo de ventas no contiene las columnas necesarias.")

# Asegurarse de que ambos DataFrames tengan las mismas columnas para los meses de marzo a julio
df_stock = df_stock.set_index(['Almacen', 'Marca'])
df_ventas = df_ventas.set_index(['Almacen', 'Marca'])

# Seleccionar columnas de ventas para los meses de marzo a julio en df_ventas
ventas_cols = ['Marzo', 'Abril', 'Mayo', 'Junio', 'Julio']

# Calcular la demanda promedio mensual por categoría, utilizando solo las columnas de ventas y excluyendo valores cero y NaN
df_ventas['Demanda_Promedio_Mensual'] = df_ventas[ventas_cols].replace(0, np.nan).mean(axis=1)

# Seleccionar columnas de inventario para los meses de marzo a julio en df_stock
inventario_cols = ['Marzo', 'Abril', 'Mayo', 'Junio', 'Julio']

# Calcular el inventario promedio por categoría, utilizando solo las columnas de inventario y excluyendo valores cero y NaN
df_stock['Inventario_Promedio'] = df_stock[inventario_cols].replace(0, np.nan).mean(axis=1)

# Combinar ambos DataFrames basados en Almacen y Marca
df_combinado = pd.merge(df_stock, df_ventas[['Demanda_Promedio_Mensual']], left_index=True, right_index=True, how='inner').reset_index()

# Calcular el ratio de rotación del inventario
df_combinado['Ratio_Rotacion'] = df_combinado['Demanda_Promedio_Mensual'] / df_combinado['Inventario_Promedio']

# Capacidad total de la tienda (ajusta este valor según tus necesidades)
capacidad_total = 10000  # Este valor es un ejemplo, ajústalo según la capacidad real de tu tienda

# Calcular la proporción de capacidad asignada a cada categoría considerando la demanda y el inventario promedio
demanda_total = df_combinado['Demanda_Promedio_Mensual'].sum()

# Calcular la capacidad mínima sugerida como un porcentaje del inventario promedio
min_ratio = 0.75  # El porcentaje mínimo del inventario promedio que queremos sugerir como stock

# Capacidad asignada (redondeada a enteros)
df_combinado['Capacidad_Asignada'] = np.round(
    (df_combinado['Demanda_Promedio_Mensual'] / demanda_total) * capacidad_total
).clip(lower=np.round(df_combinado['Inventario_Promedio'] * min_ratio))

# Calcular un stock sugerido máximo, por ejemplo, el 150% del inventario promedio
max_factor = 1.5  # Factor para calcular el stock máximo sugerido
df_combinado['Stock_Sugerido'] = np.round(df_combinado['Inventario_Promedio'] * max_factor)

# Ajustar el cálculo de Stock Sugerido Basado en Rotación usando una media ponderada
peso_inventario = 0.7
peso_rotacion = 0.3

df_combinado['Stock_Sugerido_Rotacion'] = np.round(
    (peso_inventario * df_combinado['Inventario_Promedio']) + 
    (peso_rotacion * df_combinado['Demanda_Promedio_Mensual'])
)

# Rellenar valores NaN con 0 antes de convertir a int
df_combinado['Capacidad_Asignada'] = df_combinado['Capacidad_Asignada'].fillna(0).astype(int)
df_combinado['Stock_Sugerido'] = df_combinado['Stock_Sugerido'].fillna(0).astype(int)
df_combinado['Stock_Sugerido_Rotacion'] = df_combinado['Stock_Sugerido_Rotacion'].fillna(0).astype(int)

# Preparar los datos para el modelo de Machine Learning
X = df_combinado[['Inventario_Promedio', 'Demanda_Promedio_Mensual', 'Ratio_Rotacion']]
y = df_combinado['Stock_Sugerido']  # Usamos Stock_Sugerido como la variable objetivo

# Imputar valores NaN en X usando la mediana de cada columna
imputer = SimpleImputer(strategy='median')
X_imputed = imputer.fit_transform(X)

# Normalización de los datos
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_imputed)

# Dividir los datos en conjunto de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Definir y entrenar el modelo de Gradient Boosting
gb_model = GradientBoostingRegressor(n_estimators=200, learning_rate=0.1, max_depth=10, random_state=42)
gb_model.fit(X_train, y_train)

# Predecir en el conjunto de prueba
y_pred_gb = gb_model.predict(X_test)

# Evaluar el modelo Gradient Boosting en el conjunto de prueba
mse_gb = mean_squared_error(y_test, y_pred_gb)
mae_gb = mean_absolute_error(y_test, y_pred_gb)
r2_gb = r2_score(y_test, y_pred_gb)

print(f"Gradient Boosting - MSE: {mse_gb}, MAE: {mae_gb}, R^2: {r2_gb}")

# Predecir el Stock Sugerido con el modelo entrenado
df_combinado['Stock_Sugerido_ML'] = np.round(gb_model.predict(X_scaled)).astype(int)

# Construir el modelo de red neuronal
nn_model = Sequential([
    Dense(128, input_dim=X_train.shape[1], activation='relu'),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(16, activation='relu'),
    Dense(8, activation='relu'),
    Dense(1, activation='linear')
])

# Compilar el modelo
nn_model.compile(optimizer='adam', loss='mean_squared_error')

# Entrenar el modelo
nn_model.fit(X_train, y_train, epochs=1000, batch_size=32, verbose=0)

# Predecir en el conjunto de prueba con la red neuronal
y_pred_nn = nn_model.predict(X_test)

# Evaluar el modelo de red neuronal
mse_nn = mean_squared_error(y_test, y_pred_nn)
mae_nn = mean_absolute_error(y_test, y_pred_nn)
r2_nn = r2_score(y_test, y_pred_nn)

print(f"Red Neuronal - MSE: {mse_nn}, MAE: {mae_nn}, R^2: {r2_nn}")

# Predecir el Stock Sugerido con el modelo de red neuronal entrenado
df_combinado['Stock_Sugerido_NN'] = np.round(nn_model.predict(X_scaled)).astype(int)

# Seleccionar columnas relevantes para el resultado final
result_columns = ['Almacen', 'Marca', 'Inventario_Promedio', 'Demanda_Promedio_Mensual', 
                  'Ratio_Rotacion', 'Capacidad_Asignada', 'Stock_Sugerido', 
                  'Stock_Sugerido_Rotacion', 'Stock_Sugerido_ML', 'Stock_Sugerido_NN']

# Guardar el resultado en un archivo Excel
output_file_path = 'resultado_final_marzo_julio.xlsx'
df_combinado[result_columns].to_excel(output_file_path, index=False)

# Imprimir una vista previa de los resultados
print(df_combinado[result_columns].head())
print(f"Resultados guardados en: {output_file_path}")
